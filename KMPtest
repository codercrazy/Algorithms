public class KMPTest {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String sub = "ABCDABD";
		String str = "BBC ABCDAB ABCDABCDABDE";
		KMP kmp = new KMP(str, sub);
		kmp.kmp();
	}

}

class KMP {
	private String sub, str;

	public KMP() {

	}

	public KMP(String str, String sub) {
		this.sub = sub;
		this.str = str;
	}

	public void kmp() {

		int[] next = next(sub);
		// print next[]
		for (int k = 0; k < next.length; k++) {
			System.out.print(next[k] + " ");
		}

		System.out.println();
		System.out.println(pattern(str, sub, next));// find the the same
													// pattern.
	}

	static int[] next(String sub) {
		int[] next = new int[sub.length()];
		char[] c = sub.toCharArray();
		int length = sub.length();
		int i, j;
		next[0] = -1;
		i = 0;
		j = -1;
		while (i < c.length - 1) {
			if (j == -1 || c[i] == c[j]) {
				i++;
				j++;
				if (c[i] != c[j]) {
					next[i] = j;
				} else {
					next[i] = next[j];
				}
			} else {
				j = next[j];
			}
		}
		return next;
	}

	static int pattern(String str, String sub, int[] next) {
		char[] strchar = str.toCharArray();
		char[] subchar = sub.toCharArray();
		// for(int k=0;k<next.length;k++){
		// System.out.print(next[k]+" ");
		// }
		int i = 0, j = 0;// i控制ch1，j控制ch2
		while (i < strchar.length - 1 && j <= subchar.length - 1) {
			if (j == -1 || strchar[i] == subchar[j]) {
				i++;
				j++;
			} else {
				j = next[j];
			}
		}
		if (j < subchar.length) {
			return -1;
		} else
			return i - subchar.length;
	}
}
